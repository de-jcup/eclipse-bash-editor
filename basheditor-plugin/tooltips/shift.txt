The shift command is one of the Bourne shell built-ins that comes with Bash. This command takes one argument, a number. The positional parameters are shifted to the left by this number, N. The positional parameters from N+1 to $# are renamed to variable names from $1 to $# - N+1.

Say you have a command that takes 10 arguments, and N is 4, then $4 becomes $1, $5 becomes $2 and so on. $10 becomes $7 and the original $1, $2 and $3 are thrown away.

If N is zero or greater than $#, the positional parameters are not changed (the total number of arguments, see Section 7.2.1.2) and the command has no effect. If N is not present, it is assumed to be 1. The return status is zero unless N is greater than $# or less than zero; otherwise it is non-zero.

9.7.2. Examples
A shift statement is typically used when the number of arguments to a command is not known in advance, for instance when users can give as many arguments as they like. In such cases, the arguments are usually processed in a while loop with a test condition of (( $# )). This condition is true as long as the number of arguments is greater than zero. The $1 variable and the shift statement process each argument. The number of arguments is reduced each time shift is executed and eventually becomes zero, upon which the while loop exits.

The example below, cleanup.sh, uses shift statements to process each file in the list generated by find:


	#!/bin/bash
	
	# This script can clean up files that were last accessed over 365 days ago.
	
	USAGE="Usage: $0 dir1 dir2 dir3 ... dirN"
	
	if [ "$#" == "0" ]; then
		echo "$USAGE"
		exit 1
	fi
	
	while (( "$#" )); do
	
	if [[ $(ls "$1") == "" ]]; then 
		echo "Empty directory, nothing to be done."
	  else 
		find "$1" -type f -a -atime +365 -exec rm -i {} \;
	fi
	
	shift
	
	done
	
Note	-exec vs. xargs
 	
The above find command can be replaced with the following:

	find options | xargs [commands_to_execute_on_found_files]

The xargs command builds and executes command lines from standard input. This has the advantage that the command line is filled until the system limit is reached. Only then will the command to execute be called, in the above example this would be rm. If there are more arguments, a new command line will be used, until that one is full or until there are no more arguments. The same thing using find -exec calls on the command to execute on the found files every time a file is found. Thus, using xargs greatly speeds up your scripts and the performance of your machine.

In the next example, we modified the script from Section 8.2.4.4 so that it accepts multiple packages to install at once:


	#!/bin/bash
	if [ $# -lt 1 ]; then
	        echo "Usage: $0 package(s)"
	        exit 1
	fi
	while (($#)); do
		yum install "$1" << CONFIRM
	y
	CONFIRM
	shift
	done