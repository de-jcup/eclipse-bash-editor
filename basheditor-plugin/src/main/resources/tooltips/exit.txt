The exit command terminates a script, just as in a C program. It can also return a value, which is available to the script's parent process.

Every command returns an exit status (sometimes referred to as a return status or exit code). A successful command returns a 0, while an unsuccessful one returns a non-zero value that usually can be interpreted as an error code. Well-behaved UNIX commands, programs, and utilities return a 0 exit code upon successful completion, though there are some exceptions.

Likewise, functions within a script and the script itself return an exit status. The last command executed in the function or script determines the exit status. Within a script, an exit nnn command may be used to deliver an nnn exit status to the shell (nnn must be an integer in the 0 - 255 range).

Note:
=====	
When a script ends with an exit that has no parameter, the exit status of the script is the exit status of the last command executed in the script (previous to the exit).

$? reads the exit status of the last command executed. After a function returns, $? gives the exit status of the last command executed in the function. This is Bash's way of giving functions a "return value." [1]

Following the execution of a pipe, a $? gives the exit status of the last command executed.

After a script terminates, a $? from the command-line gives the exit status of the script, that is, the last command executed in the script, which is, by convention, 0 on success or an integer in the range 1 - 255 on error.

Info:
=====
At online documentation there are many examples available.

Caution
=======	
Certain exit status codes have reserved meanings and should not be user-specified in a script:

Reserved exit codes:
--------------------
(from http://tldp.org/LDP/abs/html/exitcodes.html#EXITCODESREF )


1		Catchall for general errors	
		let "var1 = 1/0"	
		Miscellaneous errors, such as "divide by zero" and other impermissible operations
		
2		Misuse of shell builtins (according to Bash documentation)	
		empty_function() {}	
		Missing keyword or command, or permission problem (and diff return code on a failed binary file comparison).
		
126		Command invoked cannot execute	
		/dev/null	
		Permission problem or command is not an executable
		
127		"command not found"	
		illegal_command	
		Possible problem with $PATH or a typo
		
128		Invalid argument to exit	
		exit 3.14159	
		exit takes only integer args in the range 0 - 255 (see first footnote)
		
128+n	Fatal error signal "n"	
		kill -9 
		$PPID of script	$? returns 137 (128 + 9)
		
130		Script terminated by Control-C	
		Ctl-C	
		Control-C is fatal error signal 2, (130 = 128 + 2, see above)
		
255*	Exit status out of range	
		exit -1	
		exit takes only integer args in the range 0 - 255

According to the above table, exit codes 1 - 2, 126 - 165, and 255 [1] have special meanings, and should therefore be avoided for user-specified exit parameters. Ending a script with exit 127 would certainly cause confusion when troubleshooting (is the error code a "command not found" or a user-defined one?). However, many scripts use an exit 1 as a general bailout-upon-error. Since exit code 1 signifies so many possible errors, it is not particularly useful in debugging.


There has been an attempt to systematize exit status numbers (see /usr/include/sysexits.h), but this is intended for C and C++ programmers. A similar standard for scripting might be appropriate. The author of this document proposes restricting user-defined exit codes to the range 64 - 113 (in addition to 0, for success), to conform with the C/C++ standard. This would allot 50 valid codes, and make troubleshooting scripts more straightforward. [2] All user-defined exit codes in the accompanying examples to this document conform to this standard, except where overriding circumstances exist.
